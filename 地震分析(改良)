{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1Jj46Ex_FmxoOCYPX-B5hnAuG8AMLI-zf","authorship_tag":"ABX9TyOYC29DDXdwhwm518Xb+qhu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":68,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aRwZ6UySbfKg","executionInfo":{"status":"ok","timestamp":1757478819939,"user_tz":-540,"elapsed":833,"user":{"displayName":"吉岡篤志（近畿大学工業高等専門学校）","userId":"10589156441074329475"}},"outputId":"bd6d1871-80bf-4dd3-84f8-b8b9ec776fae"},"outputs":[{"output_type":"stream","name":"stdout","text":["読み込んだファイル数: 4\n","データ件数: 47456\n"]}],"source":["import pandas as pd\n","import glob\n","\n","# フォルダ内のCSVファイルを一括取得\n","files = glob.glob(\"drive/MyDrive/卒研データ/*.csv\")   # dataフォルダにあるcsv全部\n","\n","# 読み込み＆結合\n","dfs = [pd.read_csv(f) for f in files]\n","merged_df = pd.concat(dfs, ignore_index=True)\n","\n","print(\"読み込んだファイル数:\", len(files))\n","print(\"データ件数:\", len(merged_df))\n"]},{"cell_type":"code","source":["import pandas as pd\n","import regex as re\n","\n","# --- 1. ツイートデータ読み込み ---\n","tweets = pd.read_csv(\"drive/MyDrive/卒研データ/tweets.csv\")  # id, text, user_location などを想定\n","\n","# --- 2. トルコの県リスト ---\n","provinces_tr = [\n","    \"Adıyaman\", \"Gaziantep\", \"Hatay\", \"Kahramanmaraş\", \"Malatya\",\n","    \"Şanlıurfa\", \"Diyarbakır\", \"Adana\", \"Osmaniye\", \"Kilis\", \"Elazığ\"\n","]\n","\n","# --- 3. 英語・表記ゆれ対応 ---\n","mapping_tr = {\n","    \"kahramanmaras\": \"Kahramanmaraş\",\n","    \"sanliurfa\": \"Şanlıurfa\",\n","    \"diyarbakir\": \"Diyarbakır\",\n","    \"elazig\": \"Elazığ\",\n","}\n","\n","# --- 4. 県名抽出関数 ---\n","def find_province(text):\n","    if pd.isna(text):\n","        return None\n","    text = text.lower()\n","    for prov in provinces_tr:\n","        if prov.lower() in text:\n","            return prov\n","    for k, v in mapping_tr.items():\n","        if k in text:\n","            return v\n","    return None\n","\n","# --- 5. ツイートにprovince列を付与 ---\n","tweets[\"province\"] = tweets[\"Tweet Content\"].apply(find_province)\n","tweets.loc[tweets[\"province\"].isna(), \"province\"] = tweets.loc[\n","    tweets[\"province\"].isna(), \"Tweet Location\"\n","].apply(find_province)\n","\n","# --- 6. ツイート数集計 ---\n","tweet_counts = tweets.groupby(\"province\").size().reset_index(name=\"tweet_count\")\n","\n","# --- 7. 被害データ読み込み ---\n","damage_df = pd.read_csv(\"drive/MyDrive/卒研データ/turkey_earthquake_damage.csv\")\n","\n","# --- 8. 結合 ---\n","merged_df = pd.merge(tweet_counts, damage_df, on=\"province\", how=\"left\")\n","\n","# NaNを含む行を削除\n","cleaned_df = merged_df.dropna()\n","\n","# --- 人口データ作成 ---\n","population_data = {\n","    \"province\": [\n","        \"Adıyaman\", \"Diyarbakır\", \"Elazığ\", \"Gaziantep\", \"Hatay\",\n","        \"Kahramanmaraş\", \"Malatya\", \"Osmaniye\", \"Şanlıurfa\"\n","    ],\n","    \"population\": [\n","        635169, 1804880, 387072, 2154051, 1544640,\n","        1177436, 812580, 557666, 1818133\n","    ]\n","}\n","\n","population_df = pd.DataFrame(population_data)\n","\n","# --- cleaned_df に人口データをマージ ---\n","final_df = pd.merge(cleaned_df, population_df, on=\"province\", how=\"left\")\n","\n","# --- 確認 ---\n","print(final_df)\n","\n","# --- 10. 結果保存 ---\n","final_df.to_csv(\"turkey_tweet_damage_summary.csv\", index=False)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QrqLhzyTeIXb","executionInfo":{"status":"ok","timestamp":1757478821062,"user_tz":-540,"elapsed":1121,"user":{"displayName":"吉岡篤志（近畿大学工業高等専門学校）","userId":"10589156441074329475"}},"outputId":"b460b809-8ba7-4c52-e777-6d9efea4a7d0"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["        province  tweet_count  max_intensity  damage_amount_billion_usd  \\\n","0       Adıyaman          115            9.0                        5.0   \n","1     Diyarbakır           20            7.0                        2.0   \n","2         Elazığ            4            6.0                        1.0   \n","3      Gaziantep          314            9.0                        8.0   \n","4          Hatay         1573           10.0                       10.0   \n","5  Kahramanmaraş          333           11.0                       15.0   \n","6        Malatya           32            8.0                        3.0   \n","7       Osmaniye            5            7.0                        2.0   \n","8      Şanlıurfa            4            7.0                        2.0   \n","\n","    deaths  injuries  population  \n","0   5000.0   14000.0      635169  \n","1    400.0    3000.0     1804880  \n","2    100.0    1000.0      387072  \n","3   3000.0   17000.0     2154051  \n","4  20000.0   30000.0     1544640  \n","5  12000.0   35000.0     1177436  \n","6   2500.0   10000.0      812580  \n","7    900.0    3500.0      557666  \n","8    500.0    5000.0     1818133  \n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import statsmodels.api as sm\n","import statsmodels.formula.api as smf\n","import numpy as np  # Import numpy\n","\n","# データ読み込み（既に DataFrame があるなら不要）\n","df = pd.read_csv(\"turkey_tweet_damage_summary.csv\")\n","\n","# --- 1. 説明変数の選択 ---\n","# 対数リンクなので、人口の対数をオフセットとして入れるのが一般的\n","# （母集団が大きいほどツイートも増えると仮定する）\n","formula = \"tweet_count ~ max_intensity + damage_amount_billion_usd + deaths + injuries\"\n","\n","# --- 2. Poisson GLM ---\n","poisson_model = smf.glm(\n","    formula=formula,\n","    data=df,\n","    family=sm.families.Poisson(),\n","    offset=np.log(df[\"population\"])  # 人口をoffset（基準化）\n",").fit()\n","\n","print(\"\\n--- Poisson 回帰 ---\")\n","print(poisson_model.summary())\n","\n","# --- 3. Negative Binomial GLM ---\n","negbin_model = smf.glm(\n","    formula=formula,\n","    data=df,\n","    family=sm.families.NegativeBinomial(),\n","    offset=np.log(df[\"population\"])\n",").fit()\n","\n","print(\"\\n--- 負の二項回帰 ---\")\n","print(negbin_model.summary())\n","\n","# --- 4. 期待ツイート数の推定 ---\n","df[\"expected_poisson\"] = poisson_model.predict(df)\n","df[\"expected_negbin\"] = negbin_model.predict(df)\n","\n","print(df[[\"province\", \"tweet_count\", \"expected_poisson\", \"expected_negbin\"]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jTZcfaOynmu4","executionInfo":{"status":"ok","timestamp":1757478821136,"user_tz":-540,"elapsed":60,"user":{"displayName":"吉岡篤志（近畿大学工業高等専門学校）","userId":"10589156441074329475"}},"outputId":"f974053a-65d8-449a-af10-41a11ba8d259"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- Poisson 回帰 ---\n","                 Generalized Linear Model Regression Results                  \n","==============================================================================\n","Dep. Variable:            tweet_count   No. Observations:                    9\n","Model:                            GLM   Df Residuals:                        4\n","Model Family:                 Poisson   Df Model:                            4\n","Link Function:                    Log   Scale:                          1.0000\n","Method:                          IRLS   Log-Likelihood:                -122.08\n","Date:                Wed, 10 Sep 2025   Deviance:                       192.98\n","Time:                        04:33:41   Pearson chi2:                     196.\n","No. Iterations:                     7   Pseudo R-squ. (CS):              1.000\n","Covariance Type:            nonrobust                                         \n","=============================================================================================\n","                                coef    std err          z      P>|z|      [0.025      0.975]\n","---------------------------------------------------------------------------------------------\n","Intercept                   -26.7249      1.358    -19.684      0.000     -29.386     -24.064\n","max_intensity                 2.4308      0.201     12.101      0.000       2.037       2.824\n","damage_amount_billion_usd     0.3433      0.105      3.268      0.001       0.137       0.549\n","deaths                        0.0003    3.7e-05      9.211      0.000       0.000       0.000\n","injuries                     -0.0005   7.77e-05     -6.330      0.000      -0.001      -0.000\n","=============================================================================================\n","\n","--- 負の二項回帰 ---\n","                 Generalized Linear Model Regression Results                  \n","==============================================================================\n","Dep. Variable:            tweet_count   No. Observations:                    9\n","Model:                            GLM   Df Residuals:                        4\n","Model Family:        NegativeBinomial   Df Model:                            4\n","Link Function:                    Log   Scale:                          1.0000\n","Method:                          IRLS   Log-Likelihood:                -45.719\n","Date:                Wed, 10 Sep 2025   Deviance:                       3.6785\n","Time:                        04:33:41   Pearson chi2:                     2.96\n","No. Iterations:                    13   Pseudo R-squ. (CS):             0.9102\n","Covariance Type:            nonrobust                                         \n","=============================================================================================\n","                                coef    std err          z      P>|z|      [0.025      0.975]\n","---------------------------------------------------------------------------------------------\n","Intercept                   -20.8655      8.373     -2.492      0.013     -37.277      -4.454\n","max_intensity                 1.4536      1.296      1.122      0.262      -1.086       3.993\n","damage_amount_billion_usd     0.0486      0.607      0.080      0.936      -1.141       1.238\n","deaths                        0.0002      0.000      0.738      0.461      -0.000       0.001\n","injuries                     -0.0002      0.000     -0.342      0.732      -0.001       0.001\n","=============================================================================================\n","        province  tweet_count  expected_poisson  expected_negbin\n","0       Adıyaman          115          0.000246         0.000146\n","1     Diyarbakır           20          0.000032         0.000017\n","2         Elazığ            4          0.000005         0.000005\n","3      Gaziantep          314          0.000080         0.000076\n","4          Hatay         1573          0.000994         0.000887\n","5  Kahramanmaraş          333          0.000351         0.000579\n","6        Malatya           32          0.000033         0.000037\n","7       Osmaniye            5          0.000029         0.000017\n","8      Şanlıurfa            4          0.000012         0.000013\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/statsmodels/genmod/families/family.py:1367: ValueWarning: Negative binomial dispersion parameter alpha not set. Using default value alpha=1.0.\n","  warnings.warn(\"Negative binomial dispersion parameter alpha not \"\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","# Poisson\n","df[\"expected_poisson_corrected\"] = np.exp(\n","    poisson_model.params[\"Intercept\"] +\n","    poisson_model.params[\"max_intensity\"] * df[\"max_intensity\"] +\n","    poisson_model.params[\"damage_amount_billion_usd\"] * df[\"damage_amount_billion_usd\"] +\n","    poisson_model.params[\"deaths\"] * df[\"deaths\"] +\n","    poisson_model.params[\"injuries\"] * df[\"injuries\"]\n",") * df[\"population\"]\n","\n","# Negative Binomial\n","df[\"expected_negbin_corrected\"] = np.exp(\n","    negbin_model.params[\"Intercept\"] +\n","    negbin_model.params[\"max_intensity\"] * df[\"max_intensity\"] +\n","    negbin_model.params[\"damage_amount_billion_usd\"] * df[\"damage_amount_billion_usd\"] +\n","    negbin_model.params[\"deaths\"] * df[\"deaths\"] +\n","    negbin_model.params[\"injuries\"] * df[\"injuries\"]\n",") * df[\"population\"]\n","\n","print(df[[\"province\", \"tweet_count\", \"expected_poisson_corrected\", \"expected_negbin_corrected\"]])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4x1JwSFJn7Ft","executionInfo":{"status":"ok","timestamp":1757478821174,"user_tz":-540,"elapsed":36,"user":{"displayName":"吉岡篤志（近畿大学工業高等専門学校）","userId":"10589156441074329475"}},"outputId":"48d2cd41-2040-4fba-fb2e-8c9796e4f7f3"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["        province  tweet_count  expected_poisson_corrected  \\\n","0       Adıyaman          115                  156.165676   \n","1     Diyarbakır           20                   57.066294   \n","2         Elazığ            4                    1.843704   \n","3      Gaziantep          314                  171.411649   \n","4          Hatay         1573                 1535.126856   \n","5  Kahramanmaraş          333                  412.839272   \n","6        Malatya           32                   26.951398   \n","7       Osmaniye            5                   16.353344   \n","8      Şanlıurfa            4                   22.241808   \n","\n","   expected_negbin_corrected  \n","0                  92.990481  \n","1                  30.640545  \n","2                   1.887048  \n","3                 164.266878  \n","4                1370.082294  \n","5                 681.880050  \n","6                  30.393563  \n","7                   9.548923  \n","8                  23.131914  \n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"08d2c120","executionInfo":{"status":"ok","timestamp":1757479039259,"user_tz":-540,"elapsed":50,"user":{"displayName":"吉岡篤志（近畿大学工業高等専門学校）","userId":"10589156441074329475"}},"outputId":"9f6c80a5-0bf0-4846-df32-1ff31e384fb3"},"source":["import pandas as pd\n","import statsmodels.api as sm\n","import statsmodels.formula.api as smf\n","import numpy as np\n","\n","# Assuming df is already loaded and contains 'province', 'tweet_count', 'population',\n","# 'max_intensity', 'damage_amount_billion_usd', 'deaths', and 'injuries' columns\n","# If not, you may need to add the data loading steps here.\n","\n","# --- 1. 説明変数の選択 ---\n","# 対数リンクなので、人口の対数をオフセットとして入れるのが一般的\n","# （母集団が大きいほどツイートも増えると仮定する）\n","formula = \"tweet_count ~ max_intensity + damage_amount_billion_usd + deaths + injuries\"\n","\n","# --- 2. Poisson GLM ---\n","poisson_model = smf.glm(\n","    formula=formula,\n","    data=df,\n","    family=sm.families.Poisson(),\n","    offset=np.log(df[\"population\"])  # 人口をoffset（基準化）\n",").fit()\n","\n","# --- 3. Negative Binomial GLM ---\n","negbin_model = smf.glm(\n","    formula=formula,\n","    data=df,\n","    family=sm.families.NegativeBinomial(),\n","    offset=np.log(df[\"population\"])\n",").fit()\n","\n","# --- 4. 期待ツイート数の推定 ---\n","df[\"expected_poisson\"] = poisson_model.predict(df)\n","df[\"expected_negbin\"] = negbin_model.predict(df)\n","\n","\n","# Poisson\n","df[\"expected_poisson_corrected\"] = np.exp(\n","    poisson_model.params[\"Intercept\"] +\n","    poisson_model.params[\"max_intensity\"] * df[\"max_intensity\"] +\n","    poisson_model.params[\"damage_amount_billion_usd\"] * df[\"damage_amount_billion_usd\"] +\n","    poisson_model.params[\"deaths\"] * df[\"deaths\"] +\n","    poisson_model.params[\"injuries\"] * df[\"injuries\"]\n",") * df[\"population\"]\n","\n","# Negative Binomial\n","df[\"expected_negbin_corrected\"] = np.exp(\n","    negbin_model.params[\"Intercept\"] +\n","    negbin_model.params[\"max_intensity\"] * df[\"max_intensity\"] +\n","    negbin_model.params[\"damage_amount_billion_usd\"] * df[\"damage_amount_billion_usd\"] +\n","    negbin_model.params[\"deaths\"] * df[\"deaths\"] +\n","    negbin_model.params[\"injuries\"] * df[\"injuries\"]\n",") * df[\"population\"]\n","\n","# Poissonギャップスコア\n","df[\"gap_poisson\"] = (df[\"tweet_count\"] - df[\"expected_poisson_corrected\"]) / np.sqrt(df[\"expected_poisson_corrected\"])\n","\n","# Negative Binomialギャップスコア\n","alpha = negbin_model.scale  # statsmodelsで学習済みモデルの分散パラメータ\n","df[\"gap_negbin\"] = (df[\"tweet_count\"] - df[\"expected_negbin_corrected\"]) / np.sqrt(df[\"expected_negbin_corrected\"] + alpha * df[\"expected_negbin_corrected\"]**2)\n","\n","df.to_csv(\"turkey_tweet_damage_gap_summary.csv\", index=False)\n","print(df[[\"province\", \"tweet_count\", \"expected_poisson_corrected\", \"expected_negbin_corrected\", \"gap_poisson\", \"gap_negbin\"]])"],"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["        province  tweet_count  expected_poisson_corrected  \\\n","0       Adıyaman          115                  156.165676   \n","1     Diyarbakır           20                   57.066294   \n","2         Elazığ            4                    1.843704   \n","3      Gaziantep          314                  171.411649   \n","4          Hatay         1573                 1535.126856   \n","5  Kahramanmaraş          333                  412.839272   \n","6        Malatya           32                   26.951398   \n","7       Osmaniye            5                   16.353344   \n","8      Şanlıurfa            4                   22.241808   \n","\n","   expected_negbin_corrected  gap_poisson  gap_negbin  \n","0                  92.990481    -3.294143    0.235423  \n","1                  30.640545    -4.906698   -0.341738  \n","2                   1.887048     1.588045    0.905256  \n","3                 164.266878    10.890903    0.908762  \n","4                1370.082294     0.966628    0.148052  \n","5                 681.880050    -3.929398   -0.511270  \n","6                  30.393563     0.972479    0.052006  \n","7                   9.548923    -2.807505   -0.453239  \n","8                  23.131914    -3.867968   -0.809761  \n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/statsmodels/genmod/families/family.py:1367: ValueWarning: Negative binomial dispersion parameter alpha not set. Using default value alpha=1.0.\n","  warnings.warn(\"Negative binomial dispersion parameter alpha not \"\n"]}]},{"cell_type":"code","source":["!pip install pingouin"],"metadata":{"id":"EDdYrLDNxGD4","executionInfo":{"status":"aborted","timestamp":1757478821182,"user_tz":-540,"elapsed":2245,"user":{"displayName":"吉岡篤志（近畿大学工業高等専門学校）","userId":"10589156441074329475"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import statsmodels.api as sm\n","import statsmodels.formula.api as smf\n","from scipy.stats import spearmanr\n","from sklearn.preprocessing import StandardScaler\n","from statsmodels.stats.multitest import multipletests\n","from statsmodels.stats.outliers_influence import variance_inflation_factor\n","\n","# データ\n","df = pd.read_csv(\"turkey_tweet_damage_summary.csv\")\n","\n","# --- 1. GLM回帰モデル ---\n","formula = \"tweet_count ~ deaths + injuries + damage_amount_billion_usd + max_intensity\"\n","\n","# Poisson\n","poisson_model = smf.glm(\n","    formula=formula,\n","    data=df,\n","    family=sm.families.Poisson(),\n","    offset=np.log(df[\"population\"])\n",").fit()\n","\n","# Negative Binomial\n","negbin_model = smf.glm(\n","    formula=formula,\n","    data=df,\n","    family=sm.families.NegativeBinomial(),\n","    offset=np.log(df[\"population\"])\n",").fit()\n","\n","# AIC/BIC\n","print(\"Poisson AIC:\", poisson_model.aic, \"BIC:\", poisson_model.bic)\n","print(\"NegBin AIC:\", negbin_model.aic, \"BIC:\", negbin_model.bic)\n","\n","# --- 2. 標準化偏回帰係数 ---\n","scaler = StandardScaler()\n","X_std = scaler.fit_transform(df[[\"deaths\",\"injuries\",\"damage_amount_billion_usd\",\"max_intensity\"]])\n","y = df[\"tweet_count\"].values\n","X_std = sm.add_constant(X_std)\n","ols_model = sm.OLS(y, X_std).fit()\n","print(ols_model.summary())\n","\n","# --- 3. 偏相関 ---\n","# https://en.wikipedia.org/wiki/Partial_correlation\n","def partial_corr(df, x, y, covar):\n","    import pingouin as pg\n","    return pg.partial_corr(data=df, x=x, y=y, covar=covar).round(3)\n","\n","covariates = [\"deaths\",\"injuries\",\"damage_amount_billion_usd\",\"max_intensity\"]\n","for var in covariates:\n","    others = [v for v in covariates if v != var]\n","    pc = partial_corr(df, x=var, y=\"tweet_count\", covar=others)\n","    print(pc)\n","\n","# --- 4. 多重比較の調整 ---\n","pvals = ols_model.pvalues[1:]  # const以外\n","reject, pvals_corr, _, _ = multipletests(pvals, method=\"fdr_bh\")  # FDR補正\n","print(\"FDR補正済p値:\", pvals_corr)\n","\n","# --- 5. 外れ値耐性 ---\n","# スピアマン相関\n","for var in covariates:\n","    rho, pval = spearmanr(df[\"tweet_count\"], df[var])\n","    print(f\"Spearman {var}: rho={rho:.3f}, p={pval:.3f}\")\n","\n","# Theil-Sen回帰（sklearn）\n","from sklearn.linear_model import TheilSenRegressor\n","for var in covariates:\n","    X_var = df[[var]].values\n","    y_var = df[\"tweet_count\"].values\n","    model_ts = TheilSenRegressor().fit(X_var, y_var)\n","    print(f\"Theil-Sen {var}: coef={model_ts.coef_[0]:.3f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z8dnoEt2w2WP","executionInfo":{"status":"ok","timestamp":1757479441142,"user_tz":-540,"elapsed":106,"user":{"displayName":"吉岡篤志（近畿大学工業高等専門学校）","userId":"10589156441074329475"}},"outputId":"fc6d8bcf-c340-4031-8ff6-1720bc2d83de"},"execution_count":80,"outputs":[{"output_type":"stream","name":"stdout","text":["Poisson AIC: 254.15712027999297 BIC: 184.18804666851295\n","NegBin AIC: 101.43824235736199 BIC: -5.110394152677328\n","                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:                      y   R-squared:                       0.912\n","Model:                            OLS   Adj. R-squared:                  0.825\n","Method:                 Least Squares   F-statistic:                     10.41\n","Date:                Wed, 10 Sep 2025   Prob (F-statistic):             0.0217\n","Time:                        04:44:01   Log-Likelihood:                -57.345\n","No. Observations:                   9   AIC:                             124.7\n","Df Residuals:                       4   BIC:                             125.7\n","Df Model:                           4                                         \n","Covariance Type:            nonrobust                                         \n","==============================================================================\n","                 coef    std err          t      P>|t|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const        266.6667     70.781      3.767      0.020      70.147     463.186\n","x1           737.8750    305.897      2.412      0.073    -111.432    1587.182\n","x2          -490.6656   1062.187     -0.462      0.668   -3439.770    2458.439\n","x3           153.7676    564.909      0.272      0.799   -1414.671    1722.207\n","x4            19.1314    398.776      0.048      0.964   -1088.047    1126.310\n","==============================================================================\n","Omnibus:                        6.472   Durbin-Watson:                   1.887\n","Prob(Omnibus):                  0.039   Jarque-Bera (JB):                2.159\n","Skew:                           1.124   Prob(JB):                        0.340\n","Kurtosis:                       3.838   Cond. No.                         34.1\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","         n     r          CI95%  p-val\n","pearson  9  0.77  [-0.11, 0.97]  0.073\n","         n      r          CI95%  p-val\n","pearson  9 -0.225  [-0.88, 0.72]  0.668\n","         n      r          CI95%  p-val\n","pearson  9  0.135  [-0.76, 0.85]  0.799\n","         n      r         CI95%  p-val\n","pearson  9  0.024  [-0.8, 0.82]  0.964\n","FDR補正済p値: [0.29352997 0.96403582 0.96403582 0.96403582]\n","Spearman deaths: rho=0.921, p=0.000\n","Spearman injuries: rho=0.895, p=0.001\n","Spearman damage_amount_billion_usd: rho=0.953, p=0.000\n","Spearman max_intensity: rho=0.949, p=0.000\n","Theil-Sen deaths: coef=0.028\n","Theil-Sen injuries: coef=0.011\n","Theil-Sen damage_amount_billion_usd: coef=28.343\n","Theil-Sen max_intensity: coef=75.886\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/statsmodels/genmod/families/family.py:1367: ValueWarning: Negative binomial dispersion parameter alpha not set. Using default value alpha=1.0.\n","  warnings.warn(\"Negative binomial dispersion parameter alpha not \"\n","/usr/local/lib/python3.12/dist-packages/statsmodels/genmod/generalized_linear_model.py:1923: FutureWarning: The bic value is computed using the deviance formula. After 0.13 this will change to the log-likelihood based formula. This change has no impact on the relative rank of models compared using BIC. You can directly access the log-likelihood version using the `bic_llf` attribute. You can suppress this message by calling statsmodels.genmod.generalized_linear_model.SET_USE_BIC_LLF with True to get the LLF-based version now or False to retainthe deviance version.\n","  warnings.warn(\n","/usr/local/lib/python3.12/dist-packages/sklearn/linear_model/_theil_sen.py:128: ConvergenceWarning: Maximum number of iterations 300 reached in spatial median for TheilSen regressor.\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import silhouette_score\n","from statsmodels.stats.outliers_influence import variance_inflation_factor\n","from sklearn.utils import resample\n","import matplotlib.pyplot as plt\n","\n","# =========================\n","# 1. データ読み込み\n","# =========================\n","df = pd.read_csv(\"turkey_tweet_damage_gap_summary.csv\")\n","\n","# =========================\n","# 2. ギャップスコア計算\n","# =========================\n","# Poisson\n","df[\"gap_poisson\"] = (df[\"tweet_count\"] - df[\"expected_poisson_corrected\"]) / np.sqrt(df[\"expected_poisson_corrected\"])\n","\n","# Negative Binomial\n","alpha = negbin_model.scale  # 事前に学習済みモデル\n","df[\"gap_negbin\"] = (df[\"tweet_count\"] - df[\"expected_negbin_corrected\"]) / np.sqrt(\n","    df[\"expected_negbin_corrected\"] + alpha * df[\"expected_negbin_corrected\"]**2\n",")\n","\n","# =========================\n","# 3. 共線性診断（VIF）\n","# =========================\n","candidate_vars = ['deaths','injuries','damage_amount_billion_usd','expected_negbin_corrected','gap_negbin','gap_poisson']\n","X = df[candidate_vars].copy()\n","vif_data = pd.DataFrame({\n","    'feature': X.columns,\n","    'VIF': [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n","})\n","print(\"VIF values:\\n\", vif_data)\n","\n","# 共線性を避けるため、例として被害・ギャップ・曝露に絞る\n","final_vars = ['deaths','expected_negbin_corrected','gap_negbin']\n","\n","# =========================\n","# 4. 標準化\n","# =========================\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(df[final_vars])\n","\n","# =========================\n","# 5. k の決定（エルボー + シルエット）\n","# =========================\n","sse = []\n","sil_scores = []\n","K_range = range(2, len(df))  # n_samples=9なので k=2~8\n","for k in K_range:\n","    km = KMeans(n_clusters=k, random_state=42)\n","    labels = km.fit_predict(X_scaled)\n","    sse.append(km.inertia_)\n","    sil_scores.append(silhouette_score(X_scaled, labels))\n","\n","plt.figure(figsize=(12,5))\n","plt.subplot(1,2,1)\n","plt.plot(K_range, sse, '-o')\n","plt.xlabel('k'); plt.ylabel('SSE'); plt.title('Elbow Method')\n","plt.subplot(1,2,2)\n","plt.plot(K_range, sil_scores, '-o')\n","plt.xlabel('k'); plt.ylabel('Silhouette Score'); plt.title('Silhouette Score')\n","plt.show()\n","\n","# 選択したクラスタ数\n","k_opt = 2\n","\n","# =========================\n","# 6. K-meansクラスタリング\n","# =========================\n","kmeans = KMeans(n_clusters=k_opt, random_state=42)\n","df['cluster'] = kmeans.fit_predict(X_scaled)\n","\n","# =========================\n","# 7. 層別集計\n","# =========================\n","cluster_summary = df.groupby('cluster')[final_vars].mean()\n","print(\"Cluster Summary:\\n\", cluster_summary)\n","\n","# =========================\n","# 8. ブートストラップ安定性評価（集合ベースJaccard）\n","# =========================\n","def jaccard_index(set1, set2):\n","    \"\"\"集合ベースのJaccard係数\"\"\"\n","    if len(set1 | set2) == 0:\n","        return 1.0\n","    return len(set1 & set2) / len(set1 | set2)\n","\n","n_boot = 100\n","jaccard_scores = []\n","original_labels = df['cluster'].values\n","\n","for i in range(n_boot):\n","    df_sample = resample(df, replace=True, n_samples=len(df), random_state=i)\n","    labels_boot = KMeans(n_clusters=k_opt, random_state=42).fit_predict(scaler.transform(df_sample[final_vars]))\n","\n","    jaccard_per_boot = []\n","    for c in range(k_opt):\n","        orig_set = set(np.where(original_labels==c)[0])\n","        boot_set = set(np.where(labels_boot==c)[0])\n","        jaccard_per_boot.append(jaccard_index(orig_set, boot_set))\n","\n","    jaccard_scores.append(np.mean(jaccard_per_boot))\n","\n","print(\"Mean Jaccard Stability:\", np.mean(jaccard_scores))\n","\n","# =========================\n","# 9. 結果保存\n","# =========================\n","df.to_csv(\"clustered_regions_with_gap.csv\", index=False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"iyVcEKZ98CEw","executionInfo":{"status":"ok","timestamp":1757484620592,"user_tz":-540,"elapsed":788,"user":{"displayName":"吉岡篤志（近畿大学工業高等専門学校）","userId":"10589156441074329475"}},"outputId":"3f406446-3651-4326-88e6-ab4f869cbab5"},"execution_count":107,"outputs":[{"output_type":"stream","name":"stdout","text":["VIF values:\n","                      feature         VIF\n","0                     deaths  597.146238\n","1                   injuries  789.523033\n","2  damage_amount_billion_usd  349.097583\n","3  expected_negbin_corrected  223.771490\n","4                 gap_negbin    5.798308\n","5                gap_poisson    7.519394\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Cluster Summary:\n","          deaths  expected_negbin_corrected  gap_negbin\n","cluster                                               \n","0        7025.0                 407.306675    0.549373\n","1        3260.0                 155.118999   -0.412800\n","Mean Jaccard Stability: 0.370202380952381\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","from scipy.cluster.hierarchy import linkage, fcluster, dendrogram\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","# 標準化\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(df[final_vars])\n","# linkage 行列の作成\n","Z = linkage(X_scaled, method='ward')  # Ward法は分散を最小化するので小規模に向く\n","\n","# デンドログラムで可視化\n","plt.figure(figsize=(8, 4))\n","dendrogram(Z, labels=df['province'].values, color_threshold=None)\n","plt.title(\"Dendrogram (Ward linkage)\")\n","plt.ylabel(\"Distance\")\n","plt.show()\n","# 例: 2クラスタに分割\n","k_opt = 2\n","df['cluster'] = fcluster(Z, t=k_opt, criterion='maxclust') - 1  # 0スタート\n","\n","# クラスタ平均の確認\n","cluster_summary = df.groupby('cluster')[final_vars].mean()\n","print(\"Cluster Summary:\\n\", cluster_summary)\n","from sklearn.utils import resample\n","\n","n_boot = 100\n","jaccard_scores = []\n","original_labels = df['cluster'].values\n","\n","def jaccard_index(set1, set2):\n","    if len(set1 | set2) == 0:\n","        return 1.0\n","    return len(set1 & set2) / len(set1 | set2)\n","\n","for i in range(n_boot):\n","    df_sample = resample(df, replace=True, n_samples=len(df), random_state=i)\n","    X_boot = scaler.transform(df_sample[final_vars])\n","    Z_boot = linkage(X_boot, method='ward')\n","    labels_boot = fcluster(Z_boot, t=k_opt, criterion='maxclust') - 1\n","\n","    jaccard_per_boot = []\n","    for c in range(k_opt):\n","        orig_set = set(np.where(original_labels==c)[0])\n","        boot_set = set(np.where(labels_boot==c)[0])\n","        jaccard_per_boot.append(jaccard_index(orig_set, boot_set))\n","\n","    jaccard_scores.append(np.mean(jaccard_per_boot))\n","\n","print(\"Mean Jaccard Stability (Hierarchical):\", np.mean(jaccard_scores))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"lyzGONjhP3yy","executionInfo":{"status":"ok","timestamp":1757484727309,"user_tz":-540,"elapsed":539,"user":{"displayName":"吉岡篤志（近畿大学工業高等専門学校）","userId":"10589156441074329475"}},"outputId":"9835faf4-69d5-46df-eb83-4f13142df721"},"execution_count":108,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Cluster Summary:\n","                deaths  expected_negbin_corrected  gap_negbin\n","cluster                                                     \n","0        16000.000000                1025.981172   -0.181609\n","1         1771.428571                  50.408479    0.070958\n","Mean Jaccard Stability (Hierarchical): 0.3269900793650794\n"]}]}]}